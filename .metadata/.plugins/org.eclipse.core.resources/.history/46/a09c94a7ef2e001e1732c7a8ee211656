package com.atguigu.crowd.service.impl;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Objects;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DuplicateKeyException;
import org.springframework.stereotype.Service;

import com.atguigu.crowd.constant.CrowdConstant;
import com.atguigu.crowd.entity.Admin;
import com.atguigu.crowd.entity.AdminExample;
import com.atguigu.crowd.entity.AdminExample.Criteria;
import com.atguigu.crowd.exception.LoginAcctAlreadyInUseException;
import com.atguigu.crowd.exception.LoginAcctAlreadyInUseForUpdateException;
import com.atguigu.crowd.exception.LoginFailedException;
import com.atguigu.crowd.mapper.AdminMapper;
import com.atguigu.crowd.service.api.AdminService;
import com.atguigu.crowd.util.CrowdUtil;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;

@Service
public class AdminServiceImpl implements AdminService {

	@Autowired
	private AdminMapper adminMapper;

	private Logger logger = LoggerFactory.getLogger(AdminServiceImpl.class);

	public void saveAdminRoleRelationship(Integer adminId, List<Integer> roleIdList) {
		// 舊數據如下：
		// adminId roleId
		// 1 1（要刪除）
		// 1 2（要刪除）
		// 1 3
		// 1 4
		// 1 5
		// 新數據如下：
		// adminId roleId
		// 1 3（本來就有）
		// 1 4（本來就有）
		// 1 5（本來就有）
		// 1 6（新）
		// 1 7（新）
		// 為了簡化操作：先根據adminId 刪除舊的數據，再根據roleIdList 保存全部新的數據
		// 1.根據adminId 刪除舊的關聯關系數據
		adminMapper.deleteOLdRelationship(adminId);
		// 2.根據roleIdList 和adminId 保存新的關聯關系
		if (roleIdList != null && roleIdList.size() > 0) {
			adminMapper.insertNewRelationship(adminId, roleIdList);
		}
	}

	public void update(Admin admin) {

		// “Selective”表示有選擇的更新，對於null值的字段不更新
		try {
			adminMapper.updateByPrimaryKeySelective(admin);
		} catch (Exception e) {
			e.printStackTrace();

//			logger.info("異常全類名="+e.getClass().getName());

			if (e instanceof DuplicateKeyException) {
				throw new LoginAcctAlreadyInUseForUpdateException(CrowdConstant.MESSAGE_LOGIN_ACCT_ALREADY_IN_USE);
			}
		}
	}

	public Admin getAdminById(Integer adminId) {
		return adminMapper.selectByPrimaryKey(adminId);
	}

	public void saveAdmin(Admin admin) {
		
		// 1.密碼加密
		String userPswd = admin.getUserPswd();
		// userPswd = CrowdUtil.md5(userPswd);
		userPswd = passwordEncoder.encode(userPswd);
		admin.setUserPswd(userPswd);
		
		// 2.生成創建時間
		Date date = new Date();
		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String createTime = format.format(date);
		admin.setCreateTime(createTime);
		
		// 3.執行保存
		try {
			adminMapper.insert(admin);
		} catch (Exception e) {
			e.printStackTrace();
			
			logger.info("異常全類名="+e.getClass().getName());
			
			if(e instanceof DuplicateKeyException) {
				throw new LoginAcctAlreadyInUseException(CrowdConstant.MESSAGE_LOGIN_ACCT_ALREADY_IN_USE);
			}
		}
		
	}

	public PageInfo<Admin> getPageInfo(String keyword, Integer pageNum, Integer pageSize) {

		// 1.調用PageHelper的靜態方法開啟分頁功能
		// 這裏充分體現了PageHelper的“非侵入式”設計：原本要做的查詢不必有任何修改
		PageHelper.startPage(pageNum, pageSize);

		// 2.執行查詢
		List<Admin> list = adminMapper.selectAdminListByKeyword(keyword);

		// 3.封裝到PageInfo對象中
		return new PageInfo<Admin>(list);
	}

//	@Override
//	public PageInfo<Admin> getAdminPage(String keyword, Integer pageNum, Integer pageSize) {
//		// 1.開啟分頁功能
//		PageHelper.startPage(pageNum, pageSize);
//		// 2.查詢Admin 數據
//		List<Admin> adminList = adminMapper.selectAdminListByKeyword(keyword);
//		// ※輔助代碼：打印adminList 的全類名
//		Logger logger = LoggerFactory.getLogger(AdminServiceImpl.class);
//		logger.debug("adminList 的全類名是：" + adminList.getClass().getName());
//		// 3.為了方便頁面使用將adminList 封裝為PageInfo
//		PageInfo<Admin> pageInfo = new PageInfo<>(adminList);
//		return pageInfo;
//	}

//	@Override
	public Admin getAdminByLoginAcct(String loginAcct, String userPswd) {
		// 1.根據登錄賬號查詢Admin 對象
		// ①創建AdminExample 對象
		AdminExample adminExample = new AdminExample();

		// ②創建Criteria 對象
		Criteria criteria = adminExample.createCriteria();

		// ③在Criteria 對象中封裝查詢條件
		criteria.andLoginAcctEqualTo(loginAcct);

		// ④調用AdminMapper 的方法執行查詢
		List<Admin> list = adminMapper.selectByExample(adminExample);

		// 2.判斷Admin 對象是否為null
		if (list == null || list.size() == 0) {
			throw new LoginFailedException(CrowdConstant.MESSAGE_LOGIN_FAILED);
		}
		if (list.size() > 1) {
			throw new RuntimeException(CrowdConstant.MESSAGE_SYSTEM_ERROR_LOGIN_NOT_UNIQUE);
		}
		Admin admin = list.get(0);
		// 3.如果Admin 對象為null 則拋出異常
		if (admin == null) {
			throw new LoginFailedException(CrowdConstant.MESSAGE_LOGIN_FAILED);
		}

		// 4.如果Admin 對象不為null 則將數據庫密碼從Admin 對象中取出
		String userPswdDB = admin.getUserPswd();

		// 5.將表單提交的明文密碼進行加密
		String userPswdForm = CrowdUtil.md5(userPswd);

		// 6.對密碼進行比較
		if (!Objects.equals(userPswdDB, userPswdForm)) {
			// 7.如果比較結果是不一致則拋出異常
			throw new LoginFailedException(CrowdConstant.MESSAGE_LOGIN_FAILED);
		}
		// 8.如果一致則返回Admin 對象
		return admin;
	}

	public List<Admin> getAll() {
		return adminMapper.selectByExample(new AdminExample());
	}

	public void remove(Integer adminId) {
		adminMapper.deleteByPrimaryKey(adminId);
	}

	public Admin getAdminByLoginAcct(String username) {
		
		AdminExample example = new AdminExample();
		
		Criteria criteria = example.createCriteria();
		
		criteria.andLoginAcctEqualTo(username);
		
		List<Admin> list = adminMapper.selectByExample(example);
		
		Admin admin = list.get(0);
		
		return admin;
	}

}